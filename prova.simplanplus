

//n1
//syntax errors
//#n1#ERR
//{int x; x=2; int z;}


//n2
//syntax errors
//#n2#ERR
//{int f(int x) {print x+1; {if(x>10)return x-1;} return x+1; } int y=10; y=f(y); if(y==9) print y; else y+8;  }


//n3
//1 semantic errors: the return stm is not the last statement in the block. Unreachable code.
//#n3#ERR
//{int f(int x) {return(2); print(4); } }


//n4
//Type error: block with multiple return statements having mismatching types.
//#n4#ERR
//{int f(int x) { print(4); if(x==1) print x; else return; return(2);} }

//n5
// You had: 2 semantic errors: the return stm is not the last statement in the block. Unreachable code. there cannot be multiple returns in the same block.
//#n5#ERR
//{int f(int x) { {return; print 5; } print(4); if(x==1) print x; else print 3; return(2);} }


//n6
//You had: 1 semantic errors: there cannot be return in the block. It is not a function.
//#n6#ERR
//{int x=1; return; print 4;}


//n7
//Type error: incompatible types in then else branches.
//#n7#ERR
//{int f(int x) {print x+1; {x=1;if(x==1) return 2; else print 2;} return x+1; } f(1);}


//n8
//OK output: -> 6, 1
//#n8#OK
//{int f(int x) {print x+1; {x=1; if(x==1) return x;} return 2; } print f(5);}


//n9 
//Type error: block with multiple return statements having mismatching types.
//#n9#ERR
//{int f(int x) {print x+1; {x=1; if(x==1) return ;} return x+1; } f(1);}


//n10
//OK output: -> 2
//#n10#OK
//{void f(int x) {print x+1; {x=1; if(x==1) return ;} x=1; } f(1);}

//n11
//OK output: -> 2
//#n11#OK
//{void f(int x) {print x+1;} f(1);}


//n12
//You had: 1 semantic errors: there cannot be return in the block. It is not a function.
//#n12#ERR
//{int x; return;}

//n13
//Type error: not valid assignment between pointer w and x
//#n13#ERR
//{^^int z; ^^^int w; ^int x = new int; void f(int x) {print x+1; return;} x^=2; z^=x; w^=x; f(6); print(x^+3);}


//n14
//OK
//#n14#OK
//{void f(int x) {int y; return ;} int z=1; int y; if(z==1) {int y;} else {int y;}  }


//n14b
//You had: 1 semantic errors: Var id f already declared
//#n14b#ERR
//{ int f(int x){ int f=3; print(f*x); } int y=2; f(y);}


//n15
//You had: 2 semantic errors:	Var id x already declared 	Missing declaration: k
//#n15#ERR
//{int x=4; bool x = 8; print(k+x);}

//n16
//syntax errors
//#n16#ERR
//{int x=4aaat;}


//n17
//syntax errors
//#n17#ERR
//d{int x=4;}


//n18 
//lexical errors
//#n18#ERR
//#{int x=4;}


//n19
//You had: 1 semantic errors:	the return stm is not the last statement in the block. Unreachable code.
//#n19#ERR
//{ int f() { { return 1; } if (true) return 1;}}


//n20
// z has not status RW. [INITIALIZED, INITIALIZED, INITIALIZED]
//#n20#ERR
//{^^int z; int x; x=3; z^^=2;}


//n21
//Type error: cannot assign IntType value for variable z of type BoolType
//#n21#ERR
//{^^bool z; ^int x; x^=2; z^^=x^; }


//n22
//OK output: -> 2, 1000
//#n22#OK
//{^^bool z; ^int x= new int; x^=2; z = new ^bool; print x^; print x;}

//n23
//Type error: cannot assign IntType value for variable z of type BoolType
//#n23#ERR
//{^^bool z; ^int x; x^=2; z = new ^int;}


//n24
//Type error: too many dereference operations at pointer x
//#n24#ERR
//{^int x; x^^=2;}


//n25
//You had: 1 semantic errors: Var id f already declared
//#n25#ERR
//{ int f(int x){ int f=3; print(f*x); } int y=2; f(y);}


//n26
//OK output: -> 1
//#n26#OK
//{ int f(int x) {^int y = new int; y^ = 1 ; return (y^);} print f(4);}


//n27		
//Type error: wrong return type for function f
//#n27#ERR
//{ int f(int x) {^int y = new int; y^ = 1 ; return y;} }


//n28
//OK output: -> 1, 1
//#n28#OK
//{^int y = new int; ^int x = new int; y^ = 1; x^ = y^; print x^; print y^; } 


//n29
//OK output: -> 1
//#n29#OK
//{^int y = new int; ^int x = new int; y^ = 1; x^ = (y^); print x^; } 


//n30
// x non e' inizializzato
//#n30#ERR
//{int f() {^int x = new int; return (x^);} }


//n31
//OK output: -> 4
//#n31#OK
//{int f(int x){return x+1;} int g(int x){return f(x);} int z=1; if(z==f(1)) z=f(2); else z=g(3); print (z);}


//n32
// Type error: cannot assign BoolType value for variable z of type IntType
//#n32#ERR
//{int f(int x){return x+1;} bool g(int x){ if(x==1) return true; else return false;} int z=f(1); z=g(2);}


//n33
//OK output: -> 3
//#n33#OK
//{bool g(){ return true; } bool f(){ return false; } if(g()==f()) print 4; else print 3;}


//n34
//OK output: -> 4
//#n34#OK
//{bool g(){ return true; } bool f(){ return false; } if(!g()==f()) print 4; else print 3;}


//n35
//Type error: the argument of 'Neg' is not int type.
//#n35#ERR
//{bool g(){ return true; } bool f(){ return false; } if(-g()==f()) print 4;}


//n36
// alla x manca "new int"
//#n36#ERR
//{int g(){ return 1; }  ^int x; x^=3; if(g()==x^) print 4;}



//n37
//Type error: too many dereference operations at pointer y
//#n37#ERR
//{void h(^int x, ^int y){ if (y^^==0) delete x ; else { x^ = x^ - 1; h(y,x) ;} }}


//n38
//OK output: -> 1
//#n38#OK
//{  bool g(){return true;} int f(int x) {^int y = new int; g(); y^ = 1 ; return y^;} print f(2); }


//n40 
//Type error: wrong return type for function f
//#n40#ERR
//{int f(){}}

//n41
//OK
//#n41#OK
//{void f(){} }

//n42 
//Type error: function f cannot be of type pointer.
//#n42#ERR
//{ ^int f (){return new int;}}

//n43
//Type error: wrong usage of expression NewExpNode with variable x
//#n43#ERR
//{^int x = new bool;}

//n44
//Type error: wrong usage of expression DerExpNode with variable b
//#n44#ERR
//{int f(int x) {^int y = new int;  ^bool b= y;}}

//n45
//Type error: not valid assignment between pointer  and new expression
//#n45#ERR
//{^^bool x = new bool;}

//n46
//OK output: -> -4
//#n46#OK
//{^^int n = new ^int; n^= new int; n^^=3; print(n^^-7);}


//n47
// x non inizializzata
//#n47#ERR
//{int f(int a){ return a;} int x; f(x); print x;}

//n48
// z non inizializzata
//#n48#ERR
//{void f(int x){ print x;} int y=2; int z; f(y+z); }


//n49
// mutua ricorsione
// Missing declaration: g
//#n49#ERR
//{ void f(int x){ g(x); } void g(int x){ f(x); } }

//n50
// no variabili globali nel body delle funzioni
//#n50#ERR
//{ int y=2; void f(){ print y+x; } int x=3;  }


//n51
// Output: 2, 3
//#n51#OK
//{void f(int x, int y){ {int z; if(x==0) return; else print x;} print y; } f(2,3);}

//n52
// Output: true, false, true
//#n52#OK
//{void f() {print true; {return;} } bool x=false; f(); print x; print !x;  }


//n53
// Output: 3
//#n53#OK
//{ ^^int x = new ^int; ^int y ; x^=new int;  x^^=3; y=x^; print y^;}

//n54
//#n54#ERR
//{^^int x=new ^int; ^int y=new int; y^=3; x^=y; delete y; print x^^;}


//n55
// dovrebbe dare errore perchè passo x^ e non x
//#n55#ERR
//{void f(^int x){ delete x; }  ^int x=new int; x^=3; f(x^);   }

//n56
// dovrebbe dare errore perchè passo un bool al posto di un int alla funzione
//#n56#ERR
//{void f(^int x){ delete x; }  ^bool x=new bool; x^=true; f(x);   }


//n57
// output: ->3 
//#n57#OK
//{void h(^int x){ print x^; } ^^int y=new ^int; y^=new int; y^^=3; h(y^);  }

//n58
// invocazione h(y) errata
//#n58#ERR
//{void h(^^int x){ print x^^; } ^int y=new int; y^=3; h(y);  }

//n59
// invocazione h(y^) errata
//#n59#ERR
//{void h(^^int x){ print x^^; } ^int y=new int; y^=3; h(y^);  }


//n60		Output = 4
//#n60#OK
//{void h(^int x, ^int y){ if (y^==0) {print x^; delete x;}  else { x^ = x^ - 1; h(y,x); } } ^int a=new int; ^int b=new int; a^=1; b^=4; h(a,b);}

//n61		
// fa vedere la differenza tra passaggio dei parametri per valore e per riferimento
// Output = 5,3,2
//#n61#OK
//{int f(^int x, int n){ x^=3; n=4; return 5;}  ^int y=new int; int z=2; int t; y^=1; t=f(y,z); print t; print y^; print z; }


//n62		
// come il 61, ma con parametro attuale che è un puntatore di puntatore mentre il parametro formale è un puntatore
// Output = 5,3
//#n62#OK
//{int f(^int x, int n){ x^=3; n=4; return 5;} ^^int y=new ^int; int t; y^=new int;  y^^=1; t=f(y^,2); print t; print y^^;}



//n63
// errore lettura di un puntatore dopo la delete
//#n63#ERR
//{^int x=new int; x^=3; delete x; print x^;}



//n64
// esempio riuso di un puntatore dopo la delete
// viene cancellato il valore nello heap puntato dal puntatore
// la catena del puntatore non viene cancellata --> messa ad init
//#n64#OK
//{^int x=new int; x^=3; delete x; x = new int; x^=4;}
//versione ERR:
//{^int x=new int; x^=3; delete x; x^=4;}


//n65
// esempio riuso di un puntatore dopo la delete
// Output: 3,2
//#n65#OK
//{^^int x=new ^int; ^int y=new int; x^=new int; x^^=3; print x^^; delete x; x=new ^int; x^=new int; y^=4; x^^=2; print x^^; }
//versione ERR:
//{^^int x=new ^int; ^int y=new int; x^=new int; x^^=3; print x^^; delete x; y^=4; x^^=2; print x^^; }


//n66
//#n66#ERR
//{void f (^^int a, ^int b){a^=b; a^^=2; print a^^; print b^;} ^^int x=new ^int; ^int y=new int; f(x,y); delete y;  print x^^; }


//n67
// puntatore x non inizializzato
//#n67#ERR
//{ ^^int x=new ^int; delete x; }


//n68
// passaggio di puntatori non inizializzati come parametri
//#n68#ERR
//{ void f(^^int a){ a^^=4; print a^^; } ^^int x=new ^int; ^int y=new int; f(x); }


//n69
// print del puntatore che è stato cancellato
//#n69#ERR
//{ void g(^int a) {  ^int y=a;    delete y;} void f(^^int a) {  g(a^);  print(a^^);} ^^int x=new ^int; x^=new int; x^^=2; f(x); }


//{^^int x=new ^int; x^ = new int; x^^ = 22; delete x; x= new^int; x^ = new int; x^^=8; print x^^;}
//{^int x=  new int; x^ = 22; print x; delete x; x= new int; print x; x^=7;} 
//{^^int x ; ^int y = new int; x = new ^int; x^ = y ; y^ = 22 ; print y;  delete y; y= new int; print y;}
//{^^int x ; ^int y = new int; x = new ^int; x^ = y ; y^ = 22 ; delete y; y= new int; y^ = 8; print y^; print x^^; }


//n70
// a ha effetto error a causa della doppia delete
//#n70#ERR
//{void f(^int x, ^int y){delete x; delete y;} ^int a = new int; a^=3; f(a,a);}


//n71
// x^=720		x=1006
//#n71#OK
//{void f(^int x, int n){if (n==0) {print(x); delete x;} else {^int y=new int; y^=x^ * n; f(y,n-1);} } ^int u=new int; u^=1; f(u,6);}


//p01
//OK		output = 1
//#p01#OK
//{^^int x ; ^int y = new int; y^ = 1 ; x = new ^int; x^ = y ; print x^^ ;}


//p02
//You had: 1 semantic errors: Missing declaration: y
//#p02#ERR
//{ ^int x = new int; x^ = 1; delete x; y = x^; }


//p03
//dovrebbe dare errore per l'uso di x dopo delete 
//#p03#ERR
//{void f(^int x, ^int y){delete x; delete y;} ^int x = new int; f(x,x);}

//p04   
// guarda esempio n60   
//#p04#OK
//{void h(^int x, ^int y){ if (y^==0) delete x;  else { x^ = x^ - 1; h(y,x); } } }


//p05
// la versione del prof ha solo la definizione di funzione
//#p05#ERR
//{void g(^int x, int y){if (y==0) delete x; else {x^= x^-1; g(x,y); delete x;} }  ^int a = new int; int b=0; a^=2; g(a,b);}



//p06
//ERR x non è visibile dal corpo della funzione
//#p06#ERR
//{int x = 1; void f(int y) { if (y == 0)  print(x);  else f(y-1);}  f(54); }


//p07
// errore di tipo sul primo parametro della call di f
//#p07#ERR
//{int u = 1; 
void f(^int x, int n){ 
	if (n == 0) { print(x) ; delete x ; }
	else { ^int y = new int; y^ = x^ * n ; f(y,n-1) ; }	
}
f(u,6) ; }


//p08
// f(5,4) --> 9
// f(4,5) --> out of memory
//#p08#OK
//{void f(int m, int n){if (m>n) {print(m+n);} else {int x = 1; f(m+1, n+1);} } f(4,5);}

